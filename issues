	protected void createDriver(String browser, String version, String os, String methodName, String deviceName)
           			throws IOException, JSONException {
           		//System.out.println("protected void createDriver");
           		try {
           			fip = new FileInputStream(".\\src\\main\\resources\\config.Properties");
           		} catch (FileNotFoundException e) {
           			e.printStackTrace();
           		}
           		prop= new Properties();
           		try {
           			prop.load(fip);
           		} catch (IOException e) {
           			e.printStackTrace();
           		}
           		
           		DesiredCapabilities capabilities = null;
           		
           		if(testExecutionPlatform.equalsIgnoreCase("Sauce")){
           			LoginPageNew login = new LoginPageNew();
            		//Expat.pages.LoginPageNew loginPage = Expat.pages.LoginPageNew.visit(getWebDriver());
           	//		String authToken= login.visit(testDriver);
        	 //   	System.out.println("token::::::"+authToken);

	           		 capabilities = new DesiredCapabilities();
	           		//Code for browser Testing
	           		
	           		// set desired capabilities to launch appropriate browser on Sauce
	           		capabilities.setCapability(CapabilityType.BROWSER_NAME, browser);
	           		capabilities.setCapability(CapabilityType.VERSION, version);
	           		capabilities.setCapability(CapabilityType.PLATFORM, os);
	           		capabilities.setCapability("deviceName", deviceName);
	
	           		//set your sauce labs access key
	           		capabilities.setCapability("username", username);
	                capabilities.setCapability("accessKey", accesskey);
	               
	           		URL US_endpoint = null;
           		
		              if((os.equalsIgnoreCase("iOS") || os.equalsIgnoreCase("android"))
		           		   && (realDeviceList.contains(deviceName))){
		            		   capabilities.setCapability("testobject_api_key", test_object_api_key);
				           	   capabilities.setCapability("parentTunnel", "optumtest");
				           	   
				           	   capabilities.setCapability("tunnelIdentifier", "OptumRDC_Manual_Dev");
				           	 //  URL EU_endpoint = new URL("https://eu1.appium.testobject.com/wd/hub");
				           	   US_endpoint = new URL("https://us1.appium.testobject.com/wd/hub");
				           	   webDriver.set( new RemoteWebDriver(US_endpoint, capabilities));
		              }else{
			            	  capabilities.setCapability("name", methodName);
			           		  capabilities.setCapability("parentTunnel", "optumtest");
			           		  capabilities.setCapability("tunnelIdentifier", "Optum-Stage");
			           		//capabilities.setCapability("privateDevicesOnly", "true");
			           		  //capabilities.setCapability("opentoken", authToken);
			           		  RemoteWebDriver remoteDriver = new RemoteWebDriver(new URL("http://ondemand.saucelabs.com:80/wd/hub"), capabilities);
			           		  remoteDriver.setFileDetector(new LocalFileDetector());
			           	      webDriver.set(remoteDriver );
			         }
              
           		}else{
           			
		@SuppressWarnings("unused")
		DesiredCapabilities caps=null;
		//closeDriverServers();
        //closeAllOpenedBrowsers(browser);
        killExcel();
		
		switch(browser) {
		
		case "chrome":
			File file =new File(Environment("chromeDriverPath"));
			//caps=DesiredCapabilities.chrome();
			String path = System.getProperty("user.dir");
			System.out.println("Chrome Base path: " +path);
			String driverpath=path+file;
		System.out.println("Chrome complete path: " +driverpath);
			System.setProperty("webdriver.chrome.driver", driverpath);
			ChromeOptions option = new ChromeOptions();
			//option.setPageLoadStrategy(PageLoadStrategy.NONE);
			option.addArguments("enable-automation");
			//option.addArguments("--headless");
			//option.addArguments("--window-size=1920,1080");
			//options.addArguments("--no-sandbox");
			option.addArguments("--disable-extensions");
			option.setExperimentalOption("useAutomationExtension", false);
			//option.addArguments("--dns-prefetch-disable");
			option.addArguments("--disable-gpu");
			//option.setPageLoadStrategy(PageLoadStrategy.NORMAL);
			//option.setExperimentalOption("useAutomationExtension", false);
			//caps.setCapability(ChromeOptions.CAPABILITY, option);
			webDriver.set(new ChromeDriver(option));
			break;
		case "IE":
			File file1 =new File( Environment("ieDriverPath"));
			//DesiredCapabilities capabilities;
		//capabilities = DesiredCapabilities.internetExplorer();
		//capabilities.setJavascriptEnabled(true);
		InternetExplorerOptions options =new InternetExplorerOptions();
		options.ignoreZoomSettings();
		options.introduceFlakinessByIgnoringSecurityDomains();
		options.requireWindowFocus();
	//	options.destructivelyEnsureCleanSession();		
		String path1 = System.getProperty("user.dir");
		System.out.println("IE Base path: " +path1);
		String iedriverpath=path1+file1;
		System.out.println("ie complete path: " +iedriverpath);
		System.setProperty("webdriver.ie.driver", iedriverpath);
		//System.setProperty("webdriver.ie.driver", file.getAbsolutePath());
		webDriver.set(new InternetExplorerDriver(options));
		break;
		}

	       			 
      	}
           		
           		if (buildTag != null) {
           			capabilities.setCapability("build", buildTag);
           		}
           		// set current sessionId
           		String id = ((RemoteWebDriver) getWebDriver()).getSessionId().toString();
           		sessionId.set(id);
           		
           	}
           	
