protected void createDriver(String browser, String version, String os, String methodName, String deviceName)
        throws IOException, JSONException {
    FileInputStream fip = null;
    Properties prop = new Properties();
    try {
        fip = new FileInputStream(".\\src\\main\\resources\\config.Properties");
        prop.load(fip);
    } catch (FileNotFoundException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    } finally {
        if (fip != null) {
            fip.close();
        }
    }

    DesiredCapabilities capabilities = new DesiredCapabilities();
    if (testExecutionPlatform.equalsIgnoreCase("Sauce")) {
        try {
            capabilities.setCapability(CapabilityType.BROWSER_NAME, browser);
            capabilities.setCapability(CapabilityType.VERSION, version);
            capabilities.setCapability(CapabilityType.PLATFORM, os);
            capabilities.setCapability("deviceName", deviceName);
            capabilities.setCapability("username", username);
            capabilities.setCapability("accessKey", accesskey);

            URL US_endpoint = new URL("https://us1.appium.testobject.com/wd/hub");

            if ((os.equalsIgnoreCase("iOS") || os.equalsIgnoreCase("android")) && (realDeviceList.contains(deviceName))) {
                capabilities.setCapability("testobject_api_key", test_object_api_key);
                capabilities.setCapability("parentTunnel", "optumtest");
                capabilities.setCapability("tunnelIdentifier", "OptumRDC_Manual_Dev");
                webDriver.set(new RemoteWebDriver(US_endpoint, capabilities));
            } else {
                capabilities.setCapability("name", methodName);
                capabilities.setCapability("parentTunnel", "optumtest");
                capabilities.setCapability("tunnelIdentifier", "Optum-Stage");
                RemoteWebDriver remoteDriver = new RemoteWebDriver(new URL("http://ondemand.saucelabs.com:80/wd/hub"), capabilities);
                remoteDriver.setFileDetector(new LocalFileDetector());
                webDriver.set(remoteDriver);
            }

            if (buildTag != null) {
                capabilities.setCapability("build", buildTag);
            }

            String sessionId = ((RemoteWebDriver) getWebDriver()).getSessionId().toString();
            this.sessionId.set(sessionId);
        } catch (MalformedURLException e) {
            e.printStackTrace();
            System.out.println("Malformed Sauce Labs URL.");
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Error setting up Sauce Labs driver.");
        }
    } else {
        switch (browser) {
            case "chrome":
                setupLocalChromeDriver();
                break;
            case "IE":
                setupLocalIEDriver();
                break;
            default:
                throw new IllegalArgumentException("Unsupported browser: " + browser);
        }
    }
}

private void setupLocalChromeDriver() {
    String path = System.getProperty("user.dir") + Environment("chromeDriverPath");
    System.setProperty("webdriver.chrome.driver", path);
    ChromeOptions options = new ChromeOptions();
    options.addArguments("enable-automation");
    options.addArguments("--disable-extensions");
    options.setExperimentalOption("useAutomationExtension", false);
    options.addArguments("--disable-gpu");
    webDriver.set(new ChromeDriver(options));
}

private void setupLocalIEDriver() {
    String path = System.getProperty("user.dir") + Environment("ieDriverPath");
    System.setProperty("webdriver.ie.driver", path);
    InternetExplorerOptions options = new InternetExplorerOptions();
    options.ignoreZoomSettings();
    options.introduceFlakinessByIgnoringSecurityDomains();
    options.requireWindowFocus();
    webDriver.set(new InternetExplorerDriver(options));
}
